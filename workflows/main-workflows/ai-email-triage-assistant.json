{
  "createdAt": "2025-09-16T13:31:51.383Z",
  "updatedAt": "2025-09-21T13:48:19.977Z",
  "id": "JasTV4gv4NDVVogA",
  "name": "AI Email Triage Assistant",
  "active": true,
  "isArchived": false,
  "nodes": [
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $input.first().json.category }}",
                    "rightValue": "TASK_REQUEST",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "7ba53fd4-cba4-4cfc-a833-659d7725ee40"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "TASK_REQUEST"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "bd24ffd1-af3f-4708-a8aa-9a2ee321e11f",
                    "leftValue": "={{ $input.first().json.category }}",
                    "rightValue": "=ESTIMATION_REQUEST",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "ESTIMATION_REQUEST"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "7a1f79cb-387a-42cd-9496-9da2fc940ee6",
                    "leftValue": "={{ $input.first().json.category }}",
                    "rightValue": "POLICY_UPDATE",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "POLICY_UPDATE"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "d5d4a407-6d9c-4b44-8125-e64846e8b114",
                    "leftValue": "={{ $input.first().json.category }}",
                    "rightValue": "SPAM_MARKETING",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "SPAM_MARKETING"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "ecccaa93-85df-4db5-bd2a-7b40da0b0ccb",
                    "leftValue": "={{ $input.first().json.category }}",
                    "rightValue": "CONFLUENCE_LINK_ESTIMATE",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "CONFLUENCE_LINK_ESTIMATE"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "25a7cd29-1d35-43fd-b02a-b50f3bbefe80",
                    "leftValue": "={{ $input.first().json.category }}",
                    "rightValue": "OTHER",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "ORTHER"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.3,
      "position": [
        -3760,
        -432
      ],
      "id": "247f54ab-9fcc-4566-81f8-efd42c3bbc72",
      "name": "[DECIDE] - Action by Email Category"
    },
    {
      "parameters": {
        "jsCode": "/**\n * Extracts a Confluence page ID from a URL\n * @param {string} inputNodeName - The name of the node containing the Confluence URL\n * @returns {Object} An object containing the extracted pageId or null if not found\n */\nfunction extractPageId(inputNodeName = '[PARSE] - AI JSON Response') {\n  try {\n    // Get URL from the input node\n    const url = $(inputNodeName).first().json.confluence_url;\n    \n    if (!url) {\n      console.warn(\"No Confluence URL found in the input.\");\n      return { pageId: null, error: \"No URL provided\" };\n    }\n\n    // Try to extract pageId from URL parameters\n    const urlParams = new URL(url).searchParams;\n    if (urlParams.has('pageId')) {\n      return validatePageId(urlParams.get('pageId'));\n    }\n\n    // Try to extract from friendly URL pattern\n    const friendlyUrlMatch = url.match(/\\/pages\\/(\\d+)/);\n    if (friendlyUrlMatch && friendlyUrlMatch[1]) {\n      return validatePageId(friendlyUrlMatch[1]);\n    }\n\n    console.warn(\"No valid Confluence page ID pattern found in URL:\", url);\n    return { pageId: null, error: \"No valid page ID pattern found\" };\n\n  } catch (error) {\n    console.error(\"Error extracting page ID:\", error.message);\n    return { \n      pageId: null, \n      error: error.message,\n      stack: error.stack \n    };\n  }\n}\n\n/**\n * Validates if the extracted ID is a valid Confluence page ID\n * @param {string} pageId - The page ID to validate\n * @returns {Object} An object with the validated pageId or null if invalid\n */\nfunction validatePageId(pageId) {\n  if (!pageId) {\n    return { pageId: null, error: \"No page ID provided\" };\n  }\n\n  // Check if pageId contains only digits\n  if (/^\\d+$/.test(pageId)) {\n    return { pageId, error: null };\n  }\n\n  console.error(\"Invalid page ID format. Expected numeric value, got:\", pageId);\n  return { pageId: null, error: \"Invalid page ID format\" };\n}\n\n// Main execution\nconst result = extractPageId();\nreturn result;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -3536,
        -80
      ],
      "id": "a6748129-ccbf-4a1a-9d2c-51a2701a9740",
      "name": "[EXTRACT] - Confluence Page ID from URL"
    },
    {
      "parameters": {
        "url": "=https://soxes.atlassian.net/wiki/rest/api/content/{{ $('[EXTRACT] - Confluence Page ID from URL').first().json.pageId}}",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "jiraSoftwareCloudApi",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "expand",
              "value": "body.storage"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -3312,
        -80
      ],
      "id": "3ae0a767-8caa-4cf0-a8da-ad4491519e03",
      "name": "[GET] - Confluence Page",
      "credentials": {
        "jiraSoftwareCloudApi": {
          "id": "vuqHzqXD5jQQXkbq",
          "name": "Atlassian_Credential_soxes"
        }
      }
    },
    {
      "parameters": {
        "html": "={{ $json.body.storage.value }}",
        "options": {}
      },
      "type": "n8n-nodes-base.markdown",
      "typeVersion": 1,
      "position": [
        -3088,
        -80
      ],
      "id": "6cf569ce-cd88-45ee-99f3-ba51e9478bb6",
      "name": "Markdown"
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "gpt-4",
          "mode": "list",
          "cachedResultName": "GPT-4"
        },
        "messages": {
          "values": [
            {
              "content": "=You are a senior technical analyst. Your task is to read the following project requirements and provide a detailed technical task breakdown suitable for a developer to start working on.\n\nReturn ONLY a valid JSON object with a single key \"task_breakdown\". The value should be a single string containing a list of tasks formatted with Markdown bullet points (`- Task A`).\n\n**Project Requirements to Analyze:**\n---\n{{ $json.markdown }}\n---\n\n**Output Format (JSON only):**\n{\n  \"task_breakdown\": \"string\"\n}"
            }
          ]
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        -2864,
        -80
      ],
      "id": "c996b767-624b-44a1-abd0-f2ca9c0194a5",
      "name": "[ANALYZE] - Confluence Content for Breakdown",
      "credentials": {
        "openAiApi": {
          "id": "rvEVzeazfzW6v66O",
          "name": "OPEN_AI__Credential_tiennguyen15"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "/**\n * Extracts and parses JSON from AI model response\n * Supports both OpenAI and GoogleAI response formats\n * @returns {Object} Parsed JSON object or error object\n */\nfunction parseAIResponse() {\n  const aiOutput = $input.first().json;\n  \n  // Extract content based on provider format\n  const getContent = () => {\n    // OpenAI format\n    if (aiOutput.choices?.[0]?.message?.content) {\n      return aiOutput.choices[0].message.content;\n    }\n    // GoogleAI format\n    if (aiOutput.message?.content) {\n      return aiOutput.message.content;\n    }\n    // Fallback to stringify if no known format matches\n    return JSON.stringify(aiOutput);\n  };\n\n  try {\n    const jsonString = getContent();\n    \n    // Extract JSON from markdown code block if present\n    const jsonMatch = jsonString.match(/```(?:json)?\\s*([\\s\\S]*?)\\s*```/);\n    const jsonToParse = jsonMatch ? jsonMatch[1] : jsonString;\n    \n    // Parse and validate the JSON\n    const parsed = JSON.parse(jsonToParse);\n    \n    // Ensure we return an object\n    if (parsed && typeof parsed === 'object') {\n      return parsed;\n    }\n    \n    throw new Error('Parsed content is not a valid JSON object');\n    \n  } catch (error) {\n    console.error('Error parsing AI response:', {\n      error: error.message,\n      input: aiOutput,\n      stack: error.stack\n    });\n    \n    return {\n      success: false,\n      error: 'Failed to parse AI response',\n      details: error.message,\n      originalContent: jsonString\n    };\n  }\n}\n\n// Execute and return the result\nreturn parseAIResponse();"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2512,
        -80
      ],
      "id": "bfb4a42f-c09c-4357-b050-a86088fa0201",
      "name": "[PARSE] - Breakdown JSON"
    },
    {
      "parameters": {
        "jsCode": "// Helper function để \"vô hiệu hóa\" các ký tự đặc biệt trong XML/HTML\nfunction escapeXml(unsafe) {\n  if (typeof unsafe !== 'string' || !unsafe) { return unsafe; }\n  return unsafe.replace(/[<>&'\"]/g, function (c) {\n    switch (c) {\n      case '<': return '&lt;';\n      case '>': return '&gt;';\n      case '&': return '&amp;';\n      case '\\'': return '&apos;';\n      case '\"': return '&quot;';\n    }\n  });\n}\n// -- BẠN CẦN THAY ĐỔI CÁC GIÁ TRỊ TRONG PHẦN NÀY --\nconst spaceKey = \"~james\"; // Ví dụ: \"DEV\", \"PROJ\"\nconst parentPageId = \"673022176\"; // Ví dụ: \"12345678\"\n// Tùy chọn: ID trang cha trong space cá nhân của bạn\n// --------------------------------------------------\n\n// Lấy dữ liệu từ các node trước đó trong luồng này\nconst originalPageNode = $('[GET] - Confluence Page').first().json;\nconst originalUrl = $('[PARSE] - AI JSON Response').first().json.confluence_url; // Lấy từ node parse của email\nconst cleanTextNode = $('Markdown').first().json;\nconst breakdownNode = $('[PARSE] - Breakdown JSON').first().json;\n\n// Lấy và làm sạch (escape) các dữ liệu sẽ được chèn vào nội dung\nconst originalPageTitle = escapeXml(originalPageNode.title);\nconst aiTaskBreakdown = escapeXml(breakdownNode.task_breakdown).replace(/\\n/g, '<br />');\nconst originalPageCleanText = escapeXml(cleanTextNode.cleanText);\n\n// Tạo nội dung cho trang phân tích cá nhân\nconst pageContent = `\n    <h2>Trang Gốc Tham chiếu</h2>\n    <ul><li><strong>Link:</strong> <a href=\"${originalUrl}\">${originalPageTitle}</a></li></ul>\n    <hr />\n    <h2>Phân tích &amp; Bóc tách Công việc của AI</h2>\n    <ac:structured-macro ac:name=\"panel\">\n        <ac:parameter ac:name=\"title\">AI Suggested Task Breakdown</ac:parameter>\n        <ac:rich-text-body><p>${aiTaskBreakdown}</p></ac:rich-text-body>\n    </ac:structured-macro>\n    <hr />\n    <h2>Ghi chú cá nhân</h2>\n    <p><em>(Thêm ghi chú, phân tích, hoặc các câu hỏi cần làm rõ của bạn ở đây...)</em></p>\n    <hr />\n    <h2>Nội dung Gốc từ trang Project</h2>\n    <blockquote><p>${originalPageCleanText.replace(/\\n/g, '<br />')}</p></blockquote>\n`;\n\n// Cấu trúc JSON body cuối cùng để gửi cho Confluence API\nreturn {\n  \"type\": \"page\",\n  \"title\": `[Phân tích] - ${originalPageNode.title}`, // Title không cần escape\n  \"space\": { \"key\":spaceKey },\n  \"ancestors\": [{ \"id\": parentPageId }],\n  \"body\": {\n    \"storage\": {\n      \"value\": pageContent,\n      \"representation\": \"storage\"\n    }\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2288,
        -80
      ],
      "id": "e4f1ac5c-d6d7-461b-84e3-9c0424196535",
      "name": "[PARSE] - JSON for Create Confluence Page From Link-"
    },
    {
      "parameters": {
        "operation": "markAsRead",
        "messageId": "={{ $('[GET] - Unread Email').item.json.id }}"
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        -1840,
        -368
      ],
      "id": "f0402d30-30eb-43c0-aa16-024348b8ff36",
      "name": "[SET] - Mark as Read",
      "webhookId": "43ec369d-e635-4227-a9be-2085db705515",
      "credentials": {
        "gmailOAuth2": {
          "id": "YIw7bvsLVAOVl1mk",
          "name": "Gmail account"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://soxes.atlassian.net/wiki/rest/api/content",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "jiraSoftwareCloudApi",
        "sendBody": true,
        "contentType": "raw",
        "rawContentType": "application/json",
        "body": "={{ $json }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -2064,
        -80
      ],
      "id": "d3a55d13-6f4d-4ed0-8985-bfec184be8ba",
      "name": "[CREATE] - Confluence Page -CONFLUENCE_LINK_ESTIMATE",
      "credentials": {
        "jiraSoftwareCloudApi": {
          "id": "vuqHzqXD5jQQXkbq",
          "name": "Atlassian_Credential_soxes"
        }
      }
    },
    {
      "parameters": {
        "operation": "addLabels",
        "messageId": "={{ $('[GET] - Unread Email').item.json.id }}",
        "labelIds": [
          "SPAM"
        ]
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        -2064,
        -272
      ],
      "id": "2c11b834-804f-41c0-9a35-d9b26588bc08",
      "name": "[MOVE] - Email to Spam",
      "webhookId": "e976c9c8-3825-4ec9-8eda-083b13257a4e",
      "credentials": {
        "gmailOAuth2": {
          "id": "YIw7bvsLVAOVl1mk",
          "name": "Gmail account"
        },
        "onError": "continueRegularOutput"
      }
    },
    {
      "parameters": {
        "operation": "removeLabels",
        "messageId": "={{ $('[GET] - Unread Email').item.json.id }}",
        "labelIds": [
          "INBOX",
          "Label_1140568986325750094"
        ]
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        -2064,
        112
      ],
      "id": "ed190b7e-18f5-4760-837c-61d42ea61d51",
      "name": "Remove label from message",
      "webhookId": "1d70d30a-ace4-42ff-a81a-fb711fb054c8",
      "credentials": {
        "gmailOAuth2": {
          "id": "YIw7bvsLVAOVl1mk",
          "name": "Gmail account"
        },
        "onError": "continueRegularOutput"
      }
    },
    {
      "parameters": {
        "pollTimes": {
          "item": [
            {
              "mode": "everyHour",
              "minute": 15
            }
          ]
        },
        "simple": false,
        "filters": {
          "readStatus": "unread",
          "sender": "james@soxes.ch"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.gmailTrigger",
      "typeVersion": 1.3,
      "position": [
        -4880,
        -368
      ],
      "id": "b584e897-f92c-4045-9239-ffb9c1e96b68",
      "name": "[GET] - Unread Email",
      "credentials": {
        "gmailOAuth2": {
          "id": "YIw7bvsLVAOVl1mk",
          "name": "Gmail account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const nodeConvert =  $(\"[CONVERT]  Email Content to Markdown\").first().json;\nconst fullBody = nodeConvert.markdown;\n\nconst output = {\n  original_sender: nodeConvert.from,\n  clean_body: fullBody,\n  is_forwarded: false\n};\n\nconst outlookMarker = '\\nFrom: ';\nlet markerIndex = fullBody.lastIndexOf(outlookMarker); \n\nif (markerIndex !== -1) {\n  const sentIndex = fullBody.indexOf('\\nSent: ', markerIndex);\n  if (sentIndex === -1 || sentIndex > markerIndex + 300) { // Nếu không có dòng Sent hoặc nó ở quá xa\n    markerIndex = -1; // Xem như không tìm thấy\n  }\n}\n\nif (markerIndex === -1) {\n    const gmailMarker = '---------- Forwarded message ---------';\n    markerIndex = fullBody.indexOf(gmailMarker);\n}\n\nif (markerIndex !== -1) {\n  output.is_forwarded = true;\n  \n  // Lấy toàn bộ nội dung của email gốc (từ dấu hiệu trở đi)\n  const forwardedBlock = fullBody.substring(markerIndex).trim();\n  \n  // Trích xuất người gửi gốc (original_sender)\n  const fromMatch = forwardedBlock.match(/From: (.*)/);\n  if (fromMatch && fromMatch[1]) {\n    output.original_sender = fromMatch[1].split('\\n')[0].trim() ?? ''; // Lấy dòng From và làm sạch\n  }\n\n  // Trích xuất nội dung sạch (clean_body)\n  // Nội dung sạch là phần nằm SAU dòng Subject: và một dòng trống\n  const subjectMatch = forwardedBlock.match(/\\nSubject: .*/); \n  if (subjectMatch) {\n      const headersEndIndex = subjectMatch.index + subjectMatch[0].length;\n      output.clean_body = forwardedBlock.substring(headersEndIndex).trim();\n  } else {\n      // Nếu không tìm thấy Subject (trường hợp hiếm), lấy toàn bộ block\n      output.clean_body = forwardedBlock;\n  }\n}\noutput.original_sender = output.original_sender ?? '';\n// Trả về dữ liệu đã được xử lý\nreturn output;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -4432,
        -368
      ],
      "id": "da4060b6-6fae-4cd0-8a81-101765cc6315",
      "name": "[PRE-PROCESS] - Extract Original Email"
    },
    {
      "parameters": {
        "html": "={{ $('[GET] - Unread Email').item.json.html }}",
        "destinationKey": "markdown",
        "options": {}
      },
      "type": "n8n-nodes-base.markdown",
      "typeVersion": 1,
      "position": [
        -4656,
        -368
      ],
      "id": "564ce55f-33d9-49f8-a81b-a0d64ef8cbff",
      "name": "[CONVERT]  Email Content to Markdown"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "50312bbf-0413-4726-aded-dcbf93ffb52b",
              "name": "summary",
              "value": "=[EMAIL TASK] - {{ $('[CALL] AI Analysis Service').item.json.summary }}",
              "type": "string"
            },
            {
              "id": "415a18ff-8d97-4653-b674-a1cbab4a8368",
              "name": "description",
              "value": "=h3. 📋 Bối cảnh (Context)\n* *Người gửi:* {{ $('[DECIDE] - Action by Email Category').item.json.sender_name }}\n* *Độ ưu tiên AI đề xuất:* {{ $('[CALL] AI Analysis Service').item.json.priority }}\n\n----\n\nh3. ✨ Tóm tắt của AI\n{{ $('[CALL] AI Analysis Service').item.json.summary }}\n\n----\n\nh3. 📧 Nội dung Email gốc\n{quote}\n{{ $('[PRE-PROCESS] - Extract Original Email').item.json.clean_body }}\n{quote}\n\n----\n\nh3. 📝 Ghi chú\n_Ticket này được tạo tự động từ hệ thống AI Email Triage Assistant_",
              "type": "string"
            },
            {
              "id": "73910815-273b-480d-a51c-c915bad39414",
              "name": "mappedPriority",
              "value": "={{ $('[CALL] AI Analysis Service').item.json.mappedPriority }}",
              "type": "string"
            },
            {
              "id": "8b3890d0-d11a-4884-a63d-c880a44eb01b",
              "name": "mappedPriority",
              "value": "={{ $json.mappedPriority }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -2288,
        -656
      ],
      "id": "60eac4e9-7ed7-4f49-b768-cad78114515d",
      "name": "[PREPARE] - Data for Jira"
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "DrLDQaf54G0ZhJpf",
          "mode": "list",
          "cachedResultUrl": "/workflow/DrLDQaf54G0ZhJpf",
          "cachedResultName": "sub-AI-Analysis-Service"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {}
        },
        "options": {}
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.3,
      "position": [
        -3984,
        -368
      ],
      "id": "2ab439f3-e075-48a4-a928-74671fa8538b",
      "name": "[CALL] AI Analysis Service"
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "DwfZVlGV8BkAy0mU",
          "mode": "list",
          "cachedResultUrl": "/workflow/DwfZVlGV8BkAy0mU",
          "cachedResultName": "sub-Create-Jira-Task"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {}
        },
        "options": {}
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.3,
      "position": [
        -2064,
        -656
      ],
      "id": "7393fe8f-69cb-4f88-82d6-6ab45ae7de63",
      "name": "[Call] - Create Jira Task"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "793905ac-0c5b-4d6d-ae36-8a3ef9e420f9",
              "name": "content",
              "value": "",
              "type": "string"
            },
            {
              "id": "3d37d8c8-46a1-4d69-99ab-3f402fca15d7",
              "name": "spaceKey",
              "value": "~james",
              "type": "string"
            },
            {
              "id": "13d1e4d9-9898-439c-8f86-fb959ecc3733",
              "name": "parentId",
              "value": 673022176,
              "type": "number"
            },
            {
              "id": "a2eba5b5-ad41-4432-a7fd-92dc50f8bad5",
              "name": "originalSender",
              "value": "={{ $('[PRE-PROCESS] - Extract Original Email').item.json.original_sender }}",
              "type": "string"
            },
            {
              "id": "24f69a55-c424-412a-8b0d-586ce08325a7",
              "name": "cleanBody",
              "value": "={{ $('[PRE-PROCESS] - Extract Original Email').item.json.clean_body }}",
              "type": "string"
            },
            {
              "id": "7fc401dd-c745-4686-ace6-b3ebb7195d59",
              "name": "summary",
              "value": "={{ $('[CALL] AI Analysis Service').item.json.summary }}",
              "type": "string"
            },
            {
              "id": "26f0aa19-3fe1-49f9-a56e-b63d49f479c1",
              "name": "priority",
              "value": "={{ $('[CALL] AI Analysis Service').item.json.priority }}",
              "type": "string"
            },
            {
              "id": "b55a8c26-afd8-4335-b477-64bfbce38d0b",
              "name": "mappedPriority",
              "value": "={{ $('[CALL] AI Analysis Service').item.json.mappedPriority }}",
              "type": "string"
            },
            {
              "id": "d322421f-3a01-4e17-b730-3136fee66249",
              "name": "taskBreakdown",
              "value": "={{ $('[CALL] AI Analysis Service').item.json.task_breakdown }}",
              "type": "string"
            },
            {
              "id": "2a3ce81f-d756-4605-af94-d13d255f621d",
              "name": "aiOuput",
              "value": "={{ $('[CALL] AI Analysis Service').item.json }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -2288,
        -848
      ],
      "id": "38f125bf-ff0f-418e-9cc9-c3e2019f38f7",
      "name": "[PREPARE] - Data for Create Confluence"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "05a7cdc2-fa1e-4278-801f-e5bf4ed3734e",
              "name": "subject",
              "value": "={{ $('[GET] - Unread Email').item.json.headers.subject }}",
              "type": "string"
            },
            {
              "id": "a6e6bc61-12d2-4e0c-a5cb-a1b0af2fbee0",
              "name": "sender",
              "value": "={{ $('[PRE-PROCESS] - Extract Original Email').item.json?.original_sender }}",
              "type": "string"
            },
            {
              "id": "8a5d1e6f-9682-41b3-8c96-b4b0c2e59390",
              "name": "body",
              "value": "={{ $('[PRE-PROCESS] - Extract Original Email').item.json.clean_body }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -4208,
        -368
      ],
      "id": "698b3496-291c-41cf-8416-5a758d02fc4e",
      "name": "[PREPARE] - Data for AI Analysis"
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "RijpYfQk5ngFJNpN",
          "mode": "list",
          "cachedResultUrl": "/workflow/RijpYfQk5ngFJNpN",
          "cachedResultName": "sub-Create-Confluence-Page"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {}
        },
        "options": {}
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.3,
      "position": [
        -2064,
        -848
      ],
      "id": "5ae81b95-58a7-4690-a806-d9f0ca6c1665",
      "name": "Call 'sub-Create-Confluence-Page'"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "79c933f0-150e-4d83-8b94-267023810601",
              "name": "senderName",
              "value": "={{ $('[CALL] AI Analysis Service').item.json.sender_name }}",
              "type": "string"
            },
            {
              "id": "85852d7a-45ae-423c-b920-dac62f9118c5",
              "name": "emailSubject",
              "value": "={{ $('[GET] - Unread Email').item.json.headers.subject }}",
              "type": "string"
            },
            {
              "id": "e41f77b2-105b-4d66-a461-f172e65a40e8",
              "name": "aiSummary",
              "value": "={{ $('[CALL] AI Analysis Service').item.json.summary }}",
              "type": "string"
            },
            {
              "id": "a4289af6-0acd-4bb3-8e45-07ad37e04698",
              "name": "originalSender",
              "value": "=",
              "type": "string"
            },
            {
              "id": "19f97b90-3e55-4e65-afe0-6a804aeec609",
              "name": "text",
              "value": "**Đề nghị team kiểm tra và có hành động kịp thời để đảm bảo các dự án không bị ảnh hưởng.**",
              "type": "string"
            },
            {
              "id": "44a322b7-cb66-4a06-981d-f106a853297c",
              "name": "activityTitle",
              "value": "🚨 CẢNH BÁO: CÓ CẬP NHẬT CHÍNH SÁCH QUAN TRỌNG",
              "type": "string"
            },
            {
              "id": "c99aa622-27fe-4a0d-b04a-13de43bc6202",
              "name": "activitySubtitle",
              "value": "=From email : **{{ $('[CALL] AI Analysis Service').item.json.sender_name }}**",
              "type": "string"
            },
            {
              "id": "fcd8d032-95f6-42a3-9f66-d822132b9fbd",
              "name": "summary",
              "value": "=Policy Update Alert: {{ $('[GET] - Unread Email').item.json.headers.subject }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -3392,
        -1072
      ],
      "id": "81e8d276-4074-4bee-8c6a-861a97986c7a",
      "name": "[PREPARE] - Data for MSTeam"
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "9K2hf3sZ3NJ8p8GE",
          "mode": "list",
          "cachedResultUrl": "/workflow/9K2hf3sZ3NJ8p8GE",
          "cachedResultName": "sub-Send-MS-Teams-Message"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {}
        },
        "options": {}
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.3,
      "position": [
        -2896,
        -1072
      ],
      "id": "9e19b51b-d98e-4bc0-9a8d-575f047c5052",
      "name": "Call 'sub-Send-MS-Teams-Message'"
    }
  ],
  "connections": {
    "[DECIDE] - Action by Email Category": {
      "main": [
        [
          {
            "node": "[PREPARE] - Data for Jira",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "[PREPARE] - Data for Create Confluence",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "[PREPARE] - Data for MSTeam",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "[MOVE] - Email to Spam",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "[EXTRACT] - Confluence Page ID from URL",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Remove label from message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "[EXTRACT] - Confluence Page ID from URL": {
      "main": [
        [
          {
            "node": "[GET] - Confluence Page",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "[GET] - Confluence Page": {
      "main": [
        [
          {
            "node": "Markdown",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Markdown": {
      "main": [
        [
          {
            "node": "[ANALYZE] - Confluence Content for Breakdown",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "[ANALYZE] - Confluence Content for Breakdown": {
      "main": [
        [
          {
            "node": "[PARSE] - Breakdown JSON",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "[PARSE] - Breakdown JSON": {
      "main": [
        [
          {
            "node": "[PARSE] - JSON for Create Confluence Page From Link-",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "[PARSE] - JSON for Create Confluence Page From Link-": {
      "main": [
        [
          {
            "node": "[CREATE] - Confluence Page -CONFLUENCE_LINK_ESTIMATE",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Remove label from message": {
      "main": [
        [
          {
            "node": "[SET] - Mark as Read",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "[CREATE] - Confluence Page -CONFLUENCE_LINK_ESTIMATE": {
      "main": [
        [
          {
            "node": "[SET] - Mark as Read",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "[MOVE] - Email to Spam": {
      "main": [
        [
          {
            "node": "[SET] - Mark as Read",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "[GET] - Unread Email": {
      "main": [
        [
          {
            "node": "[CONVERT]  Email Content to Markdown",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "[PRE-PROCESS] - Extract Original Email": {
      "main": [
        [
          {
            "node": "[PREPARE] - Data for AI Analysis",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "[CONVERT]  Email Content to Markdown": {
      "main": [
        [
          {
            "node": "[PRE-PROCESS] - Extract Original Email",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "[PREPARE] - Data for Jira": {
      "main": [
        [
          {
            "node": "[Call] - Create Jira Task",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "[CALL] AI Analysis Service": {
      "main": [
        [
          {
            "node": "[DECIDE] - Action by Email Category",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "[Call] - Create Jira Task": {
      "main": [
        [
          {
            "node": "[SET] - Mark as Read",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "[PREPARE] - Data for Create Confluence": {
      "main": [
        [
          {
            "node": "Call 'sub-Create-Confluence-Page'",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "[PREPARE] - Data for AI Analysis": {
      "main": [
        [
          {
            "node": "[CALL] AI Analysis Service",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Call 'sub-Create-Confluence-Page'": {
      "main": [
        [
          {
            "node": "[SET] - Mark as Read",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "[PREPARE] - Data for MSTeam": {
      "main": [
        [
          {
            "node": "Call 'sub-Send-MS-Teams-Message'",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Call 'sub-Send-MS-Teams-Message'": {
      "main": [
        [
          {
            "node": "[SET] - Mark as Read",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "saveExecutionProgress": true,
    "callerPolicy": "workflowsFromSameOwner",
    "executionOrder": "v0",
    "errorWorkflow": "TblM55auqwhaZ2F7"
  },
  "staticData": {
    "node:[GET] - Unread Email": {
      "[GET] - Unread Email": {
        "lastTimeChecked": 1758350518,
        "possibleDuplicates": [
          "1995d34d7cd84ced"
        ]
      }
    }
  },
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "pinData": {},
  "versionId": "cf1ba3ae-ee72-49c2-826e-9305f906dfd7",
  "triggerCount": 1,
  "shared": [
    {
      "createdAt": "2025-09-16T13:31:51.383Z",
      "updatedAt": "2025-09-16T13:31:51.383Z",
      "role": "workflow:owner",
      "workflowId": "JasTV4gv4NDVVogA",
      "projectId": "9I0qukrB9koLQXrY"
    }
  ],
  "tags": []
}