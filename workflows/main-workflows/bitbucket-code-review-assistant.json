{
  "createdAt": "2025-09-22T14:05:19.000Z",
  "updatedAt": "2025-09-22T14:05:19.000Z",
  "id": "BitbucketCodeReview01",
  "name": "üîç Bitbucket AI Code Review Assistant",
  "active": false,
  "isArchived": false,
  "nodes": [
    {
      "parameters": {
        "height": 400,
        "width": 320,
        "content": "# üîç Bitbucket AI Code Review Assistant\n\n## üéØ M·ª•c ƒë√≠ch (Purpose)\nT·ª± ƒë·ªông h√≥a quy tr√¨nh code review cho Bitbucket, t·∫≠p trung v√†o 2 m·ª•c ti√™u ch√≠nh:\n- **T√≥m t·∫Øt thay ƒë·ªïi** cho PR nh·ªè (<200 LoC)\n- **Ph√°t hi·ªán l·ªói ti·ªÅm ·∫©ng** v√† c·∫£nh b√°o PR l·ªõn\n\n## üìã Giai ƒëo·∫°n hi·ªán t·∫°i: PHASE 1\n**Tu·∫ßn 1-2**: Setup + Logic ph√¢n lo·∫°i PR theo k√≠ch th∆∞·ªõc\n\n## üöÄ Trigger\n- **Bitbucket Webhook**: PR created/updated\n- **Events**: pullrequest:created, pullrequest:updated\n- **Resource**: Repository level\n\n## üîÑ Logic ch√≠nh (Phase 1)\n1. **Nh·∫≠n PR Event** t·ª´ Bitbucket\n2. **T√≠nh to√°n Lines of Code** (additions + deletions)\n3. **IF/ELSE Logic**:\n   - **LoC < 200** ‚Üí Nh√°nh A: T√≥m t·∫Øt diff\n   - **LoC >= 200** ‚Üí Nh√°nh B: C·∫£nh b√°o + tag author\n\n## üîê Credentials c·∫ßn thi·∫øt\n- **Bitbucket App Password**: Webhook v√† API access\n- **OpenAI API**: Cho AI analysis (GPT-4o-mini)\n- **Google Sheets**: Tracking issues (Phase 2)"
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -800,
        -400
      ],
      "id": "sticky-main-overview",
      "name": "üìñ Workflow Overview"
    },
    {
      "parameters": {
        "resource": "repository",
        "workspace": "={{ $vars.BITBUCKET_WORKSPACE }}",
        "repository": "={{ $vars.BITBUCKET_REPOSITORY }}",
        "events": [
          "pullrequest:created",
          "pullrequest:updated"
        ]
      },
      "type": "n8n-nodes-base.bitbucketTrigger",
      "typeVersion": 1,
      "position": [
        -600,
        0
      ],
      "id": "bitbucket-pr-trigger",
      "name": "üéØ Bitbucket PR Trigger",
      "webhookId": "bitbucket-pr-webhook-001"
    },
    {
      "parameters": {
        "height": 200,
        "width": 280,
        "content": "## üéØ Bitbucket PR Trigger\n\n**Setup Steps**:\n1. T·∫°o App Password trong Bitbucket\n2. Set Variables:\n   - BITBUCKET_WORKSPACE\n   - BITBUCKET_REPOSITORY  \n3. Copy webhook URL t·ª´ n8n\n4. Add webhook trong Bitbucket repository settings\n\n**Events**: pullrequest:created, pullrequest:updated"
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -600,
        -200
      ],
      "id": "sticky-trigger-setup",
      "name": "üéØ Trigger Setup"
    },
    {
      "parameters": {
        "jsCode": "// PHASE 1 - WEEK 2: Calculate Lines of Code and extract PR info\nconst webhookData = $input.all()[0].json;\n\n// Extract PR information\nconst pullRequest = webhookData.pullrequest || webhookData.data?.pullrequest;\n\nif (!pullRequest) {\n  throw new Error('No pull request data found in webhook');\n}\n\n// Calculate Lines of Code (additions + deletions)\nconst additions = pullRequest.summary?.lines_added || 0;\nconst deletions = pullRequest.summary?.lines_removed || 0;\nconst totalLinesChanged = additions + deletions;\n\n// Extract key PR information\nconst prInfo = {\n  id: pullRequest.id,\n  title: pullRequest.title,\n  description: pullRequest.description || '',\n  author: pullRequest.author?.display_name || pullRequest.author?.username || 'Unknown',\n  authorUsername: pullRequest.author?.username || 'unknown',\n  state: pullRequest.state,\n  createdOn: pullRequest.created_on,\n  updatedOn: pullRequest.updated_on,\n  source: {\n    branch: pullRequest.source?.branch?.name || 'unknown',\n    commit: pullRequest.source?.commit?.hash || 'unknown'\n  },\n  destination: {\n    branch: pullRequest.destination?.branch?.name || 'main',\n    commit: pullRequest.destination?.commit?.hash || 'unknown'\n  },\n  links: {\n    html: pullRequest.links?.html?.href || '',\n    diff: pullRequest.links?.diff?.href || '',\n    comments: pullRequest.links?.comments?.href || ''\n  },\n  // Lines of Code calculation\n  linesAdded: additions,\n  linesDeleted: deletions,\n  totalLinesChanged: totalLinesChanged,\n  // Size classification\n  sizeCategory: totalLinesChanged < 200 ? 'SMALL' : 'LARGE',\n  // Repository info\n  repository: {\n    name: pullRequest.repository?.name || 'unknown',\n    fullName: pullRequest.repository?.full_name || 'unknown'\n  }\n};\n\n// Add some logging for debugging\nconsole.log(`PR #${prInfo.id}: ${prInfo.title}`);\nconsole.log(`Lines Changed: +${additions}/-${deletions} = ${totalLinesChanged} total`);\nconsole.log(`Size Category: ${prInfo.sizeCategory}`);\n\nreturn {\n  json: prInfo\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -350,
        0
      ],
      "id": "extract-pr-info",
      "name": "üìä Extract PR Info & Calculate LoC"
    },
    {
      "parameters": {
        "height": 180,
        "width": 260,
        "content": "## üìä LoC Calculation\n\n**Logic (Week 2)**:\n- Extract `lines_added` + `lines_removed`\n- Total = additions + deletions\n- Classify: `SMALL` (<200) vs `LARGE` (>=200)\n\n**Debug**: Check logs ƒë·ªÉ verify calculation"
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -350,
        -200
      ],
      "id": "sticky-loc-calculation",
      "name": "üìä LoC Logic"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.sizeCategory }}",
                    "rightValue": "SMALL",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "size-small-condition"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "smallPR"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.sizeCategory }}",
                    "rightValue": "LARGE",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "size-large-condition"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "largePR"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3,
      "position": [
        -100,
        0
      ],
      "id": "pr-size-router",
      "name": "üîÄ PR Size Router"
    },
    {
      "parameters": {
        "height": 160,
        "width": 240,
        "content": "## üîÄ Router Logic\n\n**Switch based on sizeCategory**:\n- `SMALL` ‚Üí Nh√°nh A (T√≥m t·∫Øt)\n- `LARGE` ‚Üí Nh√°nh B (C·∫£nh b√°o)\n\n**Threshold**: 200 Lines of Code"
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -100,
        -180
      ],
      "id": "sticky-router-logic",
      "name": "üîÄ Router Logic"
    },
    {
      "parameters": {
        "method": "GET",
        "url": "={{ $json.links.diff }}",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "bitbucketApi",
        "options": {
          "response": {
            "response": {
              "responseFormat": "text"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        150,
        -100
      ],
      "id": "get-pr-diff",
      "name": "üìÑ Get PR Diff",
      "credentials": {
        "bitbucketApi": {
          "id": "bitbucket-api-credentials",
          "name": "Bitbucket API"
        }
      }
    },
    {
      "parameters": {
        "height": 140,
        "width": 200,
        "content": "## üìÑ Get Diff (Branch A)\n\n**SMALL PR Flow**:\n1. Get diff content t·ª´ Bitbucket API\n2. Chu·∫©n b·ªã cho AI analysis\n\n**Week 3**: Th√™m AI summary"
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        150,
        -280
      ],
      "id": "sticky-branch-a",
      "name": "üìÑ Branch A (Small PR)"
    },
    {
      "parameters": {
        "jsCode": "// PHASE 1 - WEEK 3: AI Summary for Small PRs\nconst prData = $('extract-pr-info').item(0).json;\nconst diffText = $input.all()[0].json.data;\n\n// Prepare prompt for AI analysis\nconst prompt = `B·∫°n l√† m·ªôt senior developer. H√£y t√≥m t·∫Øt nh·ªØng thay ƒë·ªïi ch√≠nh trong Pull Request sau th√†nh 3-5 g·∫°ch ƒë·∫ßu d√≤ng ng·∫Øn g·ªçn v√† r√µ r√†ng.\n\n**Pull Request**: ${prData.title}\n**Author**: ${prData.author}\n**Lines Changed**: +${prData.linesAdded}/-${prData.linesDeleted}\n\n**Code Changes**:\n\\`\\`\\`diff\n${diffText.substring(0, 4000)} ${diffText.length > 4000 ? '...(truncated)' : ''}\n\\`\\`\\`\n\nH√£y tr·∫£ v·ªÅ t√≥m t·∫Øt theo format sau:\n- **üîß [Lo·∫°i thay ƒë·ªïi]**: M√¥ t·∫£ ng·∫Øn g·ªçn\n- **üìù [Chi ti·∫øt]**: Nh·ªØng g√¨ ƒë∆∞·ª£c thay ƒë·ªïi\n- **‚ö° [Impact]**: T√°c ƒë·ªông ƒë·∫øn h·ªá th·ªëng\n\nCh·ªâ t·∫≠p trung v√†o nh·ªØng thay ƒë·ªïi quan tr·ªçng v√† √Ω nghƒ©a business.`;\n\nreturn {\n  json: {\n    prInfo: prData,\n    diffContent: diffText,\n    aiPrompt: prompt,\n    action: 'SUMMARIZE_CHANGES'\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        400,
        -100
      ],
      "id": "prepare-ai-summary",
      "name": "ü§ñ Prepare AI Summary"
    },
    {
      "parameters": {
        "jsCode": "// PHASE 1 - WEEK 4: Generate warning comment for Large PRs\nconst prData = $input.all()[0].json;\n\n// Create professional warning message\nconst warningComment = `‚ö†Ô∏è **PR Exceeds Size Threshold**\n\nHi @${prData.authorUsername}! üëã\n\nPull Request n√†y c√≥ **${prData.totalLinesChanged} d√≤ng code thay ƒë·ªïi** (${prData.linesAdded} additions, ${prData.linesDeleted} deletions), v∆∞·ª£t qu√° ng∆∞·ª°ng khuy·∫øn ngh·ªã c·ªßa team (200 LoC).\n\n**üîç T·∫°i sao ƒëi·ªÅu n√†y quan tr·ªçng?**\n- PR l·ªõn kh√≥ review v√† d·ªÖ b·ªè s√≥t l·ªói\n- TƒÉng th·ªùi gian merge v√† conflict risk\n- Kh√≥ rollback n·∫øu c√≥ v·∫•n ƒë·ªÅ\n\n**üí° ƒê·ªÅ ngh·ªã:**\nXem x√©t chia nh·ªè PR n√†y th√†nh c√°c ph·∫ßn ƒë·ªôc l·∫≠p:\n- T√°ch refactor kh·ªèi feature m·ªõi\n- Chia theo module/component ri√™ng bi·ªát\n- T·∫°o separate PR cho config changes\n\n**üìä Th·ªëng k√™ PR:**\n- **Title**: ${prData.title}\n- **Branch**: ${prData.source.branch} ‚Üí ${prData.destination.branch}\n- **Created**: ${new Date(prData.createdOn).toLocaleDateString('vi-VN')}\n\n*Tin nh·∫Øn n√†y ƒë∆∞·ª£c t·∫°o t·ª± ƒë·ªông b·ªüi Code Review Bot ü§ñ*`;\n\nreturn {\n  json: {\n    prInfo: prData,\n    warningComment: warningComment,\n    action: 'POST_WARNING',\n    shouldTag: true,\n    taggedUser: prData.authorUsername\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        150,
        100
      ],
      "id": "generate-warning",
      "name": "‚ö†Ô∏è Generate Large PR Warning"
    },
    {
      "parameters": {
        "height": 160,
        "width": 220,
        "content": "## ‚ö†Ô∏è Branch B (Large PR)\n\n**LARGE PR Flow**:\n1. T·∫°o professional warning message\n2. Tag author trong comment\n3. ƒê·ªÅ ngh·ªã c√°ch chia nh·ªè PR\n\n**Week 4**: Auto-post comment"
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        150,
        280
      ],
      "id": "sticky-branch-b",
      "name": "‚ö†Ô∏è Branch B (Large PR)"
    },
    {
      "parameters": {
        "model": "gpt-4o-mini",
        "options": {
          "temperature": 0.3,
          "maxTokens": 500
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1,
      "position": [
        650,
        -200
      ],
      "id": "openai-chat-model",
      "name": "üß† OpenAI GPT-4o-mini",
      "credentials": {
        "openAiApi": {
          "id": "openai-api-key",
          "name": "OpenAI API"
        }
      }
    },
    {
      "parameters": {
        "options": {
          "systemMessage": "B·∫°n l√† m·ªôt senior software developer v·ªõi kinh nghi·ªám review code. H√£y ph√¢n t√≠ch code changes m·ªôt c√°ch ch√≠nh x√°c v√† t√≥m t·∫Øt ng·∫Øn g·ªçn, t·∫≠p trung v√†o business impact v√† technical changes quan tr·ªçng."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.6,
      "position": [
        650,
        -100
      ],
      "id": "ai-code-analyzer",
      "name": "üîç AI Code Analyzer"
    },
    {
      "parameters": {
        "jsCode": "// PHASE 1 - WEEK 3: Format AI response for Bitbucket comment\nconst prData = $('prepare-ai-summary').item(0).json.prInfo;\nconst aiResponse = $input.all()[0].json.output;\n\n// Create formatted comment for Bitbucket\nconst summaryComment = `ü§ñ **AI Code Review Summary**\n\n**Pull Request**: ${prData.title}\n**Author**: ${prData.author}\n**Lines Changed**: +${prData.linesAdded}/-${prData.linesDeleted} (${prData.totalLinesChanged} total)\n**Branch**: ${prData.source.branch} ‚Üí ${prData.destination.branch}\n\n**üìã Summary of Changes:**\n${aiResponse}\n\n---\n*This summary was generated automatically by AI Code Review Assistant üöÄ*\n\n**Next Steps**: Please review the changes and ensure all tests are passing before merging.\n\n*üí° Pro tip: Smaller PRs (< 200 LoC) are easier to review and less prone to bugs!*`;\n\nreturn {\n  json: {\n    prInfo: prData,\n    aiSummary: aiResponse,\n    formattedComment: summaryComment,\n    action: 'POST_SUMMARY',\n    commentType: 'AI_SUMMARY'\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        900,
        -100
      ],
      "id": "format-ai-comment",
      "name": "üí¨ Format AI Comment"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://api.bitbucket.org/2.0/repositories/{{ $('extract-pr-info').item(0).json.repository.fullName }}/pullrequests/{{ $('extract-pr-info').item(0).json.id }}/comments",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "bitbucketApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "content",
              "value": "={{ $json.formattedComment }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1150,
        -100
      ],
      "id": "post-summary-comment",
      "name": "üí¨ Post Summary Comment",
      "credentials": {
        "bitbucketApi": {
          "id": "bitbucket-api-credentials",
          "name": "Bitbucket API"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://api.bitbucket.org/2.0/repositories/{{ $json.prInfo.repository.fullName }}/pullrequests/{{ $json.prInfo.id }}/comments",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "bitbucketApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "content",
              "value": "={{ $json.warningComment }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        400,
        100
      ],
      "id": "post-warning-comment",
      "name": "‚ö†Ô∏è Post Warning Comment",
      "credentials": {
        "bitbucketApi": {
          "id": "bitbucket-api-credentials",
          "name": "Bitbucket API"
        }
      }
    },
    {
      "parameters": {
        "height": 180,
        "width": 260,
        "content": "## ü§ñ AI Analysis (Week 3)\n\n**GPT-4o-mini Configuration**:\n- Temperature: 0.3 (focused responses)\n- Max tokens: 500 (concise summaries)\n- System prompt: Senior developer context\n\n**Output**: 3-5 bullet points t√≥m t·∫Øt thay ƒë·ªïi"
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        650,
        -320
      ],
      "id": "sticky-ai-config",
      "name": "ü§ñ AI Configuration"
    },
    {
      "parameters": {
        "height": 200,
        "width": 280,
        "content": "## üìà Phase 1 Progress Tracking\n\n**‚úÖ Week 1**: Bitbucket webhook setup\n**‚úÖ Week 2**: LoC calculation & routing logic\n**üîÑ Week 3**: AI summary for small PRs  \n**‚è≥ Week 4**: Warning system for large PRs\n\n**Next Phase**: Inline review & Google Sheets tracking\n\n**Success Metrics**:\n- Webhook responds correctly ‚úÖ\n- PR size classification works ‚úÖ\n- AI summaries are helpful üîÑ\n- Large PR warnings reduce average PR size ‚è≥"
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1150,
        -320
      ],
      "id": "sticky-progress",
      "name": "üìà Progress Tracking"
    }
  ],
  "connections": {
    "bitbucket-pr-trigger": {
      "main": [
        [
          {
            "node": "extract-pr-info",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "extract-pr-info": {
      "main": [
        [
          {
            "node": "pr-size-router",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "pr-size-router": {
      "main": [
        [
          {
            "node": "get-pr-diff",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "generate-warning",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "get-pr-diff": {
      "main": [
        [
          {
            "node": "prepare-ai-summary",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "prepare-ai-summary": {
      "main": [
        [
          {
            "node": "ai-code-analyzer",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "generate-warning": {
      "main": [
        [
          {
            "node": "post-warning-comment",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "openai-chat-model": {
      "ai_languageModel": [
        [
          {
            "node": "ai-code-analyzer",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "ai-code-analyzer": {
      "main": [
        [
          {
            "node": "format-ai-comment",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "format-ai-comment": {
      "main": [
        [
          {
            "node": "post-summary-comment",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [
    {
      "createdAt": "2025-09-22T14:05:19.000Z",
      "updatedAt": "2025-09-22T14:05:19.000Z",
      "id": "code-review",
      "name": "code-review"
    },
    {
      "createdAt": "2025-09-22T14:05:19.000Z", 
      "updatedAt": "2025-09-22T14:05:19.000Z",
      "id": "bitbucket",
      "name": "bitbucket"
    },
    {
      "createdAt": "2025-09-22T14:05:19.000Z",
      "updatedAt": "2025-09-22T14:05:19.000Z", 
      "id": "ai-automation",
      "name": "ai-automation"
    }
  ],
  "triggerCount": 1,
  "meta": {
    "templateCredsSetupCompleted": false,
    "instanceId": "bitbucket-code-review-workflow-v1"
  },
  "hash": "bitbucket-ai-code-review-assistant"
}