{
  "name": "AI Email Triage Assistant",
  "nodes": [
    {
      "parameters": {
        "project": {
          "__rl": true,
          "value": "10866",
          "mode": "list",
          "cachedResultName": "James' Management Hub"
        },
        "issueType": {
          "__rl": true,
          "value": "10289",
          "mode": "list",
          "cachedResultName": "Task"
        },
        "summary": "=[EMAIL TASK] - {{ $('[DECIDE] - Action by Email Category').item.json.summary }}",
        "additionalFields": {
          "description": "=h3. Bối cảnh (Context)\\n* *Người gửi:* {{ $('[DECIDE] - Action by Email Category').item.json.sender_name }}\\n* *Độ ưu tiên AI đề xuất:* {{ $('[PARSE] - AI JSON Response').item.json.priority }}\\n---\\n\\nh2. Tóm tắt của AI\\n{{ $('[PARSE] - AI JSON Response').item.json.summary }}\\n---\\nh2. Nội dung Email gốc\\n\\n{quote}\\n{{ $('[PRE-PROCESS] - Extract Original Email').item.json.clean_body }}\\n{quote}",
          "priority": {
            "__rl": true,
            "value": "={{ $json.mappedPriority }}",
            "mode": "id"
          }
        }
      },
      "type": "n8n-nodes-base.jira",
      "typeVersion": 1,
      "position": [
        -4880,
        336
      ],
      "id": "1b5c38b6-c953-4291-80b3-1798be5a19be",
      "name": "[CREATE] - Jira Task from Emai",
      "credentials": {
        "jiraSoftwareCloudApi": {
          "id": "vuqHzqXD5jQQXkbq",
          "name": "Atlassian_Credential_soxes"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $input.first().json.category }}",
                    "rightValue": "TASK_REQUEST",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "7ba53fd4-cba4-4cfc-a833-659d7725ee40"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "TASK_REQUEST"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "bd24ffd1-af3f-4708-a8aa-9a2ee321e11f",
                    "leftValue": "={{ $input.first().json.category }}",
                    "rightValue": "=ESTIMATION_REQUEST",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "ESTIMATION_REQUEST"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "7a1f79cb-387a-42cd-9496-9da2fc940ee6",
                    "leftValue": "={{ $input.first().json.category }}",
                    "rightValue": "POLICY_UPDATE",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "POLICY_UPDATE"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "d5d4a407-6d9c-4b44-8125-e64846e8b114",
                    "leftValue": "={{ $input.first().json.category }}",
                    "rightValue": "SPAM_MARKETING",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "SPAM_MARKETING"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "ecccaa93-85df-4db5-bd2a-7b40da0b0ccb",
                    "leftValue": "={{ $input.first().json.category }}",
                    "rightValue": "CONFLUENCE_LINK_ESTIMATE",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "CONFLUENCE_LINK_ESTIMATE"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "25a7cd29-1d35-43fd-b02a-b50f3bbefe80",
                    "leftValue": "={{ $input.first().json.category }}",
                    "rightValue": "OTHER",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "ORTHER"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.3,
      "position": [
        -3760,
        -432
      ],
      "id": "247f54ab-9fcc-4566-81f8-efd42c3bbc72",
      "name": "[DECIDE] - Action by Email Category"
    },
    {
      "parameters": {
        "jsCode": "/**\\n * Extracts a Confluence page ID from a URL\\n * @param {string} inputNodeName - The name of the node containing the Confluence URL\\n * @returns {Object} An object containing the extracted pageId or null if not found\\n */\\nfunction extractPageId(inputNodeName = '[PARSE] - AI JSON Response') {\\n  try {\\n    // Get URL from the input node\\n    const url = $(inputNodeName).first().json.confluence_url;\\n    \\n    if (!url) {\\n      console.warn(\\\"No Confluence URL found in the input.\\\");\\n      return { pageId: null, error: \\\"No URL provided\\\" };\\n    }\\n\\n    // Try to extract pageId from URL parameters\\n    const urlParams = new URL(url).searchParams;\\n    if (urlParams.has('pageId')) {\\n      return validatePageId(urlParams.get('pageId'));\\n    }\\n\\n    // Try to extract from friendly URL pattern\\n    const friendlyUrlMatch = url.match(/\\\\/pages\\\\/(\\\\d+)/);\\n    if (friendlyUrlMatch && friendlyUrlMatch[1]) {\\n      return validatePageId(friendlyUrlMatch[1]);\\n    }\\n\\n    console.warn(\\\"No valid Confluence page ID pattern found in URL:\\\", url);\\n    return { pageId: null, error: \\\"No valid page ID pattern found\\\" };\\n\\n  } catch (error) {\\n    console.error(\\\"Error extracting page ID:\\\", error.message);\\n    return { \\n      pageId: null, \\n      error: error.message,\\n      stack: error.stack \\n    };\\n  }\\n}\\n\\n/**\\n * Validates if the extracted ID is a valid Confluence page ID\\n * @param {string} pageId - The page ID to validate\\n * @returns {Object} An object with the validated pageId or null if invalid\\n */\\nfunction validatePageId(pageId) {\\n  if (!pageId) {\\n    return { pageId: null, error: \\\"No page ID provided\\\" };\\n  }\\n\\n  // Check if pageId contains only digits\\n  if (/^\\\\d+$/.test(pageId)) {\\n    return { pageId, error: null };\\n  }\\n\\n  console.error(\\\"Invalid page ID format. Expected numeric value, got:\\\", pageId);\\n  return { pageId: null, error: \\\"Invalid page ID format\\\" };\\n}\\n\\n// Main execution\\nconst result = extractPageId();\\nreturn result;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -3536,
        -80
      ],
      "id": "a6748129-ccbf-4a1a-9d2c-51a2701a9740",
      "name": "[EXTRACT] - Confluence Page ID from URL"
    },
    {
      "parameters": {
        "url": "=https://soxes.atlassian.net/wiki/rest/api/content/{{ $('[EXTRACT] - Confluence Page ID from URL').first().json.pageId}}",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "jiraSoftwareCloudApi",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "expand",
              "value": "body.storage"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -3312,
        -80
      ],
      "id": "3ae0a767-8caa-4cf0-a8da-ad4491519e03",
      "name": "[GET] - Confluence Page",
      "credentials": {
        "jiraSoftwareCloudApi": {
          "id": "vuqHzqXD5jQQXkbq",
          "name": "Atlassian_Credential_soxes"
        }
      }
    },
    {
      "parameters": {
        "html": "={{ $json.body.storage.value }}",
        "options": {}
      },
      "type": "n8n-nodes-base.markdown",
      "typeVersion": 1,
      "position": [
        -3088,
        -80
      ],
      "id": "6cf569ce-cd88-45ee-99f3-ba51e9478bb6",
      "name": "Markdown"
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "gpt-4",
          "mode": "list",
          "cachedResultName": "GPT-4"
        },
        "messages": {
          "values": [
            {
              "content": "=You are a senior technical analyst. Your task is to read the following project requirements and provide a detailed technical task breakdown suitable for a developer to start working on.\\n\\nReturn ONLY a valid JSON object with a single key \\\"task_breakdown\\\". The value should be a single string containing a list of tasks formatted with Markdown bullet points (`- Task A`).\\n\\n**Project Requirements to Analyze:**\\n---\\n{{ $json.markdown }}\\n---\\n\\n**Output Format (JSON only):**\\n{\\n  \\\"task_breakdown\\\": \\\"string\\\"\\n}"
            }
          ]
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        -2864,
        -80
      ],
      "id": "c996b767-624b-44a1-abd0-f2ca9c0194a5",
      "name": "[ANALYZE] - Confluence Content for Breakdown",
      "credentials": {
        "openAiApi": {
          "id": "rvEVzeazfzW6v66O",
          "name": "OPEN_AI__Credential_tiennguyen15"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "/**\\n * Extracts and parses JSON from AI model response\\n * Supports both OpenAI and GoogleAI response formats\\n * @returns {Object} Parsed JSON object or error object\\n */\\nfunction parseAIResponse() {\\n  const aiOutput = $input.first().json;\\n  \\n  // Extract content based on provider format\\n  const getContent = () => {\\n    // OpenAI format\\n    if (aiOutput.choices?.[0]?.message?.content) {\\n      return aiOutput.choices[0].message.content;\\n    }\\n    // GoogleAI format\\n    if (aiOutput.message?.content) {\\n      return aiOutput.message.content;\\n    }\\n    // Fallback to stringify if no known format matches\\n    return JSON.stringify(aiOutput);\\n  };\\n\\n  try {\\n    const jsonString = getContent();\\n    \\n    // Extract JSON from markdown code block if present\\n    const jsonMatch = jsonString.match(/```(?:json)?\\\\s*([\\\\s\\\\S]*?)\\\\s*```/);\\n    const jsonToParse = jsonMatch ? jsonMatch[1] : jsonString;\\n    \\n    // Parse and validate the JSON\\n    const parsed = JSON.parse(jsonToParse);\\n    \\n    // Ensure we return an object\\n    if (parsed && typeof parsed === 'object') {\\n      return parsed;\\n    }\\n    \\n    throw new Error('Parsed content is not a valid JSON object');\\n    \\n  } catch (error) {\\n    console.error('Error parsing AI response:', {\\n      error: error.message,\\n      input: aiOutput,\\n      stack: error.stack\\n    });\\n    \\n    return {\\n      success: false,\\n      error: 'Failed to parse AI response',\\n      details: error.message,\\n      originalContent: jsonString\\n    };\\n  }\\n}\\n\\n// Execute and return the result\\nreturn parseAIResponse();"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2512,
        -80
      ],
      "id": "bfb4a42f-c09c-4357-b050-a86088fa0201",
      "name": "[PARSE] - Breakdown JSON"
    },
    {
      "parameters": {
        "jsCode": "// Helper function để \\\"vô hiệu hóa\\\" các ký tự đặc biệt trong XML/HTML\\nfunction escapeXml(unsafe) {\\n  if (typeof unsafe !== 'string' || !unsafe) { return unsafe; }\\n  return unsafe.replace(/[<>&'\\\"]/g, function (c) {\\n    switch (c) {\\n      case '<': return '&lt;';\\n      case '>': return '&gt;';\\n      case '&': return '&amp;';\\n      case '\\\\'': return '&apos;';\\n      case '\\\"': return '&quot;';\\n    }\\n  });\\n}\\n// -- BẠN CẦN THAY ĐỔI CÁC GIÁ TRỊ TRONG PHẦN NÀY --\\nconst spaceKey = \\\"~james\\\"; // Ví dụ: \\\"DEV\\\", \\\"PROJ\\\"\\nconst parentPageId = \\\"673022176\\\"; // Ví dụ: \\\"12345678\\\"\\n// Tùy chọn: ID trang cha trong space cá nhân của bạn\\n// --------------------------------------------------\\n\\n// Lấy dữ liệu từ các node trước đó trong luồng này\\nconst originalPageNode = $('[GET] - Confluence Page').first().json;\\nconst originalUrl = $('[PARSE] - AI JSON Response').first().json.confluence_url; // Lấy từ node parse của email\\nconst cleanTextNode = $('Markdown').first().json;\\nconst breakdownNode = $('[PARSE] - Breakdown JSON').first().json;\\n\\n// Lấy và làm sạch (escape) các dữ liệu sẽ được chèn vào nội dung\\nconst originalPageTitle = escapeXml(originalPageNode.title);\\nconst aiTaskBreakdown = escapeXml(breakdownNode.task_breakdown).replace(/\\\\n/g, '<br />');\\nconst originalPageCleanText = escapeXml(cleanTextNode.cleanText);\\n\\n// Tạo nội dung cho trang phân tích cá nhân\\nconst pageContent = `\\n    <h2>Trang Gốc Tham chiếu</h2>\\n    <ul><li><strong>Link:</strong> <a href=\\\"${originalUrl}\\\">${originalPageTitle}</a></li></ul>\\n    <hr />\\n    <h2>Phân tích &amp; Bóc tách Công việc của AI</h2>\\n    <ac:structured-macro ac:name=\\\"panel\\\">\\n        <ac:parameter ac:name=\\\"title\\\">AI Suggested Task Breakdown</ac:parameter>\\n        <ac:rich-text-body><p>${aiTaskBreakdown}</p></ac:rich-text-body>\\n    </ac:structured-macro>\\n    <hr />\\n    <h2>Ghi chú cá nhân</h2>\\n    <p><em>(Thêm ghi chú, phân tích, hoặc các câu hỏi cần làm rõ của bạn ở đây...)</em></p>\\n    <hr />\\n    <h2>Nội dung Gốc từ trang Project</h2>\\n    <blockquote><p>${originalPageCleanText.replace(/\\\\n/g, '<br />')}</p></blockquote>\\n`;\\n\\n// Cấu trúc JSON body cuối cùng để gửi cho Confluence API\\nreturn {\\n  \\\"type\\\": \\\"page\\\",\\n  \\\"title\\\": `[Phân tích] - ${originalPageNode.title}`, // Title không cần escape\\n  \\\"space\\\": { \\\"key\\\":spaceKey },\\n  \\\"ancestors\\\": [{ \\\"id\\\": parentPageId }],\\n  \\\"body\\\": {\\n    \\\"storage\\\": {\\n      \\\"value\\\": pageContent,\\n      \\\"representation\\\": \\\"storage\\\"\\n    }\\n  }\\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2288,
        -80
      ],
      "id": "e4f1ac5c-d6d7-461b-84e3-9c0424196535",
      "name": "[PARSE] - JSON for Create Confluence Page From Link-"
    },
    {
      "parameters": {
        "operation": "markAsRead",
        "messageId": "={{ $('[GET] - Unread Email').item.json.id }}"
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        -1840,
        -368
      ],
      "id": "f0402d30-30eb-43c0-aa16-024348b8ff36",
      "name": "[SET] - Mark as Read",
      "webhookId": "43ec369d-e635-4227-a9be-2085db705515",
      "credentials": {
        "gmailOAuth2": {
          "id": "YIw7bvsLVAOVl1mk",
          "name": "Gmail account"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "jsCode": "// Lấy dữ liệu từ các node trước\\nconst preprocessNode = $('[PRE-PROCESS] - Extract Original Email').first().json;\\nconst aiParseNode = $('[PARSE] - AI JSON Response').first().json;\\nconst emailNode = $('[GET] - Unread Email').first().json;\\n\\n// Cấu trúc MessageCard cho tin nhắn cảnh báo\\nreturn {\\n  \\\"@type\\\": \\\"MessageCard\\\",\\n  \\\"@context\\\": \\\"http://schema.org/extensions\\\",\\n  \\\"themeColor\\\": \\\"FF5733\\\", // Màu cam/đỏ để nhấn mạnh sự cảnh báo\\n  \\\"summary\\\": `Policy Update Alert: ${emailNode.subject}`,\\n  \\\"sections\\\": [{\\n    \\\"activityTitle\\\": \\\"🚨 CẢNH BÁO: CÓ CẬP NHẬT CHÍNH SÁCH QUAN TRỌNG!\\\",\\n    \\\"activitySubtitle\\\": `Từ email của: **${aiParseNode.original_sender}**`,\\n    \\\"facts\\\": [\\n      {\\n        \\\"name\\\": \\\"Tiêu đề Email:\\\",\\n        \\\"value\\\": emailNode.subject\\n      },\\n      {\\n        \\\"name\\\": \\\"Tóm tắt (AI):\\\",\\n        \\\"value\\\": aiParseNode.summary\\n      }\\n    ],\\n    \\\"markdown\\\": true,\\n    \\\"text\\\": \\\"**Đề nghị team kiểm tra và có hành động kịp thời để đảm bảo các dự án không bị ảnh hưởng.**\\\"\\n  }]\\n  // Không cần nút bấm cho loại thông báo này\\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2288,
        -464
      ],
      "id": "6d4e99a1-4d7c-440f-bcdc-7e9ecca77e8d",
      "name": "[PARSE] - JSON Policy Update on MS Teams"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://soxes.atlassian.net/wiki/rest/api/content",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "jiraSoftwareCloudApi",
        "sendBody": true,
        "contentType": "raw",
        "rawContentType": "application/json",
        "body": "={{ $json }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -2064,
        -80
      ],
      "id": "d3a55d13-6f4d-4ed0-8985-bfec184be8ba",
      "name": "[CREATE] - Confluence Page -CONFLUENCE_LINK_ESTIMATE",
      "credentials": {
        "jiraSoftwareCloudApi": {
          "id": "vuqHzqXD5jQQXkbq",
          "name": "Atlassian_Credential_soxes"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://soxesch.webhook.office.com/webhookb2/73e7b54a-62e6-48d9-9d94-d67485c65f95@8a0574d9-5f21-4779-a076-b4818eb23b70/IncomingWebhook/05a59d859995452393b0f12a87e27189/34d0a5f9-a3e2-49ad-86f0-c8509e0ebf7f/V2oXe_4uI5yLDYaXGnVtsurOXAusmIAhrFbC75CCpxWfs1",
        "sendBody": true,
        "contentType": "raw",
        "rawContentType": "application/json",
        "body": "={{ $json }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -2064,
        -464
      ],
      "id": "ea5d2e00-e7bf-429a-bc86-24751f060244",
      "name": "[ALERT] - Policy Update on MS Teams"
    },
    {
      "parameters": {
        "operation": "addLabels",
        "messageId": "={{ $('[GET] - Unread Email').item.json.id }}",
        "labelIds": [
          "SPAM"
        ]
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        -2064,
        -272
      ],
      "id": "2c11b834-804f-41c0-9a35-d9b26588bc08",
      "name": "[MOVE] - Email to Spam",
      "webhookId": "e976c9c8-3825-4ec9-8eda-083b13257a4e",
      "credentials": {
        "gmailOAuth2": {
          "id": "YIw7bvsLVAOVl1mk",
          "name": "Gmail account"
        }
      }
    },
    {
      "parameters": {
        "operation": "removeLabels",
        "messageId": "={{ $('[GET] - Unread Email').item.json.id }}",
        "labelIds": [
          "INBOX",
          "Label_1140568986325750094"
        ]
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        -2064,
        112
      ],
      "id": "ed190b7e-18f5-4760-837c-61d42ea61d51",
      "name": "Remove label from message",
      "webhookId": "1d70d30a-ace4-42ff-a81a-fb711fb054c8",
      "credentials": {
        "gmailOAuth2": {
          "id": "YIw7bvsLVAOVl1mk",
          "name": "Gmail account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Extract input data\\nconst aiOutput = $input.first().json;\\nconst jsonString = aiOutput.message.content;\\n\\n// Configuration object for priority mapping (easier to maintain)\\nconst PRIORITY_MAPPING = {\\n  'Blocker': '10000',\\n  'Critical': '10001',\\n  'Major': '10002',\\n  'Minor': '10003',\\n  'Trivial': '10004',\\n  'Planned only (do not start)': '10005',\\n  'Medium': '10009',\\n  'Low': '10010',\\n  'Lowest': '10011',\\n  'High': '10012',\\n  'Highest': '10013'\\n};\\n\\n// Function to map priority with default empty string\\nconst mapPriority = (priority) => PRIORITY_MAPPING[priority] || '';\\n\\n// Main processing\\ntry {\\n  const dataObject = JSON.parse(jsonString);\\n  \\n  // Add mapped priority to the object\\n  return {\\n    ...dataObject,\\n    mappedPriority: mapPriority(dataObject.priority)\\n  };\\n  \\n} catch (error) {\\n  // Error handling with more context\\n  console.error(\\\"JSON parsing error:\\\", {\\n    error: error.message,\\n    stack: error.stack\\n  });\\n  \\n  return { \\n    error: \\\"Failed to parse AI output as JSON\\\",\\n    details: error.message,\\n    originalContent: jsonString,\\n    success: false\\n  };\\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -4528,
        560
      ],
      "id": "52554d42-4e71-4e52-94bd-12a0b88522a4",
      "name": "[PARSE] - AI JSON Response",
      "disabled": true
    },
    {
      "parameters": {
        "pollTimes": {
          "item": [
            {
              "mode": "everyHour",
              "minute": 15
            }
          ]
        },
        "simple": false,
        "filters": {
          "readStatus": "unread",
          "sender": "james@soxes.ch"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.gmailTrigger",
      "typeVersion": 1.3,
      "position": [
        -4880,
        -368
      ],
      "id": "b584e897-f92c-4045-9239-ffb9c1e96b68",
      "name": "[GET] - Unread Email",
      "credentials": {
        "gmailOAuth2": {
          "id": "YIw7bvsLVAOVl1mk",
          "name": "Gmail account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const nodeConvert =  $(\\\"[CONVERT]  Email Content to Markdown\\\").first().json;\\nconst fullBody = nodeConvert.markdown;\\n\\nconst output = {\\n  original_sender: nodeConvert.from,\\n  clean_body: fullBody,\\n  is_forwarded: false\\n};\\n\\nconst outlookMarker = '\\\\nFrom: ';\\nlet markerIndex = fullBody.lastIndexOf(outlookMarker); \\n\\nif (markerIndex !== -1) {\\n  const sentIndex = fullBody.indexOf('\\\\nSent: ', markerIndex);\\n  if (sentIndex === -1 || sentIndex > markerIndex + 300) { // Nếu không có dòng Sent hoặc nó ở quá xa\\n    markerIndex = -1; // Xem như không tìm thấy\\n  }\\n}\\n\\nif (markerIndex === -1) {\\n    const gmailMarker = '---------- Forwarded message ---------';\\n    markerIndex = fullBody.indexOf(gmailMarker);\\n}\\n\\nif (markerIndex !== -1) {\\n  output.is_forwarded = true;\\n  \\n  // Lấy toàn bộ nội dung của email gốc (từ dấu hiệu trở đi)\\n  const forwardedBlock = fullBody.substring(markerIndex).trim();\\n  \\n  // Trích xuất người gửi gốc (original_sender)\\n  const fromMatch = forwardedBlock.match(/From: (.*)/);\\n  if (fromMatch && fromMatch[1]) {\\n    output.original_sender = fromMatch[1].split('\\\\n')[0].trim() ?? ''; // Lấy dòng From và làm sạch\\n  }\\n\\n  // Trích xuất nội dung sạch (clean_body)\\n  // Nội dung sạch là phần nằm SAU dòng Subject: và một dòng trống\\n  const subjectMatch = forwardedBlock.match(/\\\\nSubject: .*/);\\n  if (subjectMatch) {\\n      const headersEndIndex = subjectMatch.index + subjectMatch[0].length;\\n      output.clean_body = forwardedBlock.substring(headersEndIndex).trim();\\n  } else {\\n      // Nếu không tìm thấy Subject (trường hợp hiếm), lấy toàn bộ block\\n      output.clean_body = forwardedBlock;\\n  }\\n}\\noutput.original_sender = output.original_sender ?? '';\\n// Trả về dữ liệu đã được xử lý\\nreturn output;\\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -4432,
        -368
      ],
      "id": "da4060b6-6fae-4cd0-8a81-101765cc6315",
      "name": "[PRE-PROCESS] - Extract Original Email"
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "gpt-4o",
          "mode": "list",
          "cachedResultName": "GPT-4O"
        },
        "messages": {
          "values": [
            {
              "content": "=# Email Classification Prompt (Detailed Analysis)\\n\\nYou are an expert Vietnamese email analysis assistant. Analyze the email content and return ONLY a valid JSON object. Do not use markdown code blocks, backticks, or any formatting. Return raw JSON only.\\n\\n## Email Content:\\n---\\n**Subject:** {{ $('[GET] - Unread Email').item.json.headers.subject }}\\n**From:** {{ $('[PRE-PROCESS] - Extract Original Email').item.json?.original_sender }}\\n**Body:** {{ $('[PRE-PROCESS] - Extract Original Email').item.json.clean_body }}\\n\\n## Detailed Classification Instructions:\\n\\n### 1. Summary Analysis\\nCreate a comprehensive Vietnamese summary that captures:\\n- Main purpose of the email\\n- Key details or requirements mentioned\\n- Any deadlines or time constraints\\n- Target length: 1-2 sentences with specific details\\n\\n### 2. Category Classification (analyze content patterns carefully):\\n\\n**`TASK_REQUEST`**: \\n- Contains action verbs: \\\"tạo\\\", \\\"làm\\\", \\\"cập nhật\\\", \\\"kiểm tra\\\", \\\"sửa\\\", \\\"implement\\\", \\\"develop\\\"\\n- Has specific deliverables mentioned\\n- Includes deadlines or timeline expectations\\n- Direct work assignments or requests\\n\\n**`ESTIMATION_REQUEST`**: \\n- Asks for time/effort estimates: \\\"báo giá\\\", \\\"estimate\\\", \\\"effort\\\", \\\"timeline\\\"\\n- Contains detailed feature/project descriptions IN the email body\\n- May include technical specifications or requirements\\n- Requests planning or scoping information\\n\\n**`CONFLUENCE_LINK_ESTIMATE`**: \\n- Primary content is a Confluence/wiki link\\n- Minimal text description, mainly redirects to external documentation\\n- Link patterns: confluence, wiki, notion, jira\\n- Brief message asking to review linked content for estimation\\n\\n**`POLICY_UPDATE`**: \\n- From official platform accounts (Apple, Google, Meta, Microsoft)\\n- Sender patterns: noreply@, notifications@, developer@\\n- Content about policy changes, terms updates, platform announcements\\n- Formal, template-based language\\n\\n**`SPAM_MARKETING`**: \\n- Promotional content with sales language\\n- Unknown or business senders\\n- Call-to-action buttons: \\\"Buy now\\\", \\\"Sign up\\\", \\\"Learn more\\\"\\n- Unsolicited advertising content\\n\\n**`OTHER`**: \\n- General communication, status updates, meeting notes\\n- Social messages, team announcements\\n- Information sharing without specific requests\\n\\n### 3. Priority Assessment (consider urgency indicators):\\n\\n**High Priority Indicators:**\\n- Words: \\\"urgent\\\", \\\"ASAP\\\", \\\"critical\\\", \\\"emergency\\\", \\\"gấp\\\"\\n- Deadlines within 24 hours\\n- From C-level executives or direct managers\\n- Production issues or critical bugs\\n\\n**Medium Priority Indicators:**\\n- Deadlines within current week\\n- Project-related requests\\n- Estimation requests for planning\\n- Regular work assignments\\n\\n**Low Priority Indicators:**\\n- No specific deadlines\\n- Informational content\\n- Marketing emails\\n- Optional reviews or feedback\\n\\n### 4. Task Breakdown (detailed for ESTIMATION_REQUEST only):\\nWhen category is `ESTIMATION_REQUEST`, break down into specific development tasks:\\n- Frontend tasks: UI components, user interactions, responsive design\\n- Backend tasks: API development, database changes, integrations\\n- Testing tasks: unit tests, integration tests, QA scenarios\\n- DevOps tasks: deployment, configuration, monitoring\\n- Each task should be specific enough to estimate hours/days\\n- Use format: \\\"- [Task type] Task description\\\"\\n- If not ESTIMATION_REQUEST, return empty string \\\"\\\"\\n\\n### 5. Sender Analysis:\\nExtract clean sender name by:\\n- Removing email domain (@company.com)\\n- Removing titles (Mr., Ms., Dr.)\\n- Keeping first and last name only\\n- Handle corporate senders appropriately\\n\\n### 6. URL Extraction:\\nFor CONFLUENCE_LINK_ESTIMATE category:\\n- Extract complete URLs starting with http/https\\n- Focus on confluence, wiki, notion, jira links\\n- Ensure URL is valid and complete\\n- Return empty string \\\"\\\" for other categories\\n\\n## Advanced Analysis Considerations:\\n- Analyze email tone and formality level\\n- Consider sender relationship (internal vs external)\\n- Evaluate technical complexity mentioned\\n- Account for Vietnamese language nuances\\n- Look for implicit urgency indicators\\n\\n## Output Format (raw JSON only):\\n{\\n  \\\"summary\\\": \\\"Detailed Vietnamese summary with key specifics\\\",\\n  \\\"category\\\": \\\"category_name\\\",\\n  \\\"priority\\\": \\\"High/Medium/Low\\\",\\n  \\\"task_breakdown\\\": \\\"detailed_markdown_bullets_or_empty_string\\\",\\n  \\\"sender_name\\\": \\\"clean_name_only\\\",\\n  \\\"confluence_url\\\": \\\"complete_url_or_empty_string\\\"\\n}"
            }
          ]
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        -4880,
        560
      ],
      "id": "319cf83a-bedb-4204-870b-82a31cc4cea1",
      "name": "[ANALYZE] - Email Content",
      "credentials": {
        "openAiApi": {
          "id": "rvEVzeazfzW6v66O",
          "name": "OPEN_AI__Credential_tiennguyen15"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "html": "={{ $('[GET] - Unread Email').item.json.html }}",
        "destinationKey": "markdown",
        "options": {}
      },
      "type": "n8n-nodes-base.markdown",
      "typeVersion": 1,
      "position": [
        -4656,
        -368
      ],
      "id": "564ce55f-33d9-49f8-a81b-a0d64ef8cbff",
      "name": "[CONVERT]  Email Content to Markdown"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "50312bbf-0413-4726-aded-dcbf93ffb52b",
              "name": "summary",
              "value": "=[EMAIL TASK] - {{ $('[CALL] AI Analysis Service').item.json.summary }}",
              "type": "string"
            },
            {
              "id": "415a18ff-8d97-4653-b674-a1cbab4a8368",
              "name": "description",
              "value": "=h3. 📋 Bối cảnh (Context)\\n* *Người gửi:* {{ $('[DECIDE] - Action by Email Category').item.json.sender_name }}\\n* *Độ ưu tiên AI đề xuất:* {{ $('[CALL] AI Analysis Service').item.json.priority }}\\n\\n----\\n\\nh3. ✨ Tóm tắt của AI\\n{{ $('[CALL] AI Analysis Service').item.json.summary }}\\n\\n----\\n\\nh3. 📧 Nội dung Email gốc\\n{quote}\\n{{ $('[PRE-PROCESS] - Extract Original Email').item.json.clean_body }}\\n{quote}\\n\\n----\\n\\nh3. 📝 Ghi chú\\n_Ticket này được tạo tự động từ hệ thống AI Email Triage Assistant_",
              "type": "string"
            },
            {
              "id": "73910815-273b-480d-a51c-c915bad39414",
              "name": "mappedPriority",
              "value": "={{ $('[CALL] AI Analysis Service').item.json.mappedPriority }}",
              "type": "string"
            },
            {
              "id": "8b3890d0-d11a-4884-a63d-c880a44eb01b",
              "name": "mappedPriority",
              "value": "={{ $json.mappedPriority }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -2288,
        -656
      ],
      "id": "60eac4e9-7ed7-4f49-b768-cad78114515d",
      "name": "[PREPARE] - Data for Jira"
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "DrLDQaf54G0ZhJpf",
          "mode": "list",
          "cachedResultUrl": "/workflow/DrLDQaf54G0ZhJpf",
          "cachedResultName": "sub-AI-Analysis-Service"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {}
        },
        "options": {}
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.3,
      "position": [
        -3984,
        -368
      ],
      "id": "2ab439f3-e075-48a4-a928-74671fa8538b",
      "name": "[CALL] AI Analysis Service"
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "DwfZVlGV8BkAy0mU",
          "mode": "list",
          "cachedResultUrl": "/workflow/DwfZVlGV8BkAy0mU",
          "cachedResultName": "sub-Create-Jira-Task"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {}
        },
        "options": {}
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.3,
      "position": [
        -2064,
        -656
      ],
      "id": "7393fe8f-69cb-4f88-82d6-6ab45ae7de63",
      "name": "[Call] - Create Jira Task"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "793905ac-0c5b-4d6d-ae36-8a3ef9e420f9",
              "name": "content",
              "value": "",
              "type": "string"
            },
            {
              "id": "3d37d8c8-46a1-4d69-99ab-3f402fca15d7",
              "name": "spaceKey",
              "value": "~james",
              "type": "string"
            },
            {
              "id": "13d1e4d9-9898-439c-8f86-fb959ecc3733",
              "name": "parentId",
              "value": 673022176,
              "type": "number"
            },
            {
              "id": "a2eba5b5-ad41-4432-a7fd-92dc50f8bad5",
              "name": "originalSender",
              "value": "={{ $('[PRE-PROCESS] - Extract Original Email').item.json.original_sender }}",
              "type": "string"
            },
            {
              "id": "24f69a55-c424-412a-8b0d-586ce08325a7",
              "name": "cleanBody",
              "value": "={{ $('[PRE-PROCESS] - Extract Original Email').item.json.clean_body }}",
              "type": "string"
            },
            {
              "id": "7fc401dd-c745-4686-ace6-b3ebb7195d59",
              "name": "summary",
              "value": "={{ $('[CALL] AI Analysis Service').item.json.summary }}",
              "type": "string"
            },
            {
              "id": "26f0aa19-3fe1-49f9-a56e-b63d49f479c1",
              "name": "priority",
              "value": "={{ $('[CALL] AI Analysis Service').item.json.priority }}",
              "type": "string"
            },
            {
              "id": "b55a8c26-afd8-4335-b477-64bfbce38d0b",
              "name": "mappedPriority",
              "value": "={{ $('[CALL] AI Analysis Service').item.json.mappedPriority }}",
              "type": "string"
            },
            {
              "id": "d322421f-3a01-4e17-b730-3136fee66249",
              "name": "taskBreakdown",
              "value": "={{ $('[CALL] AI Analysis Service').item.json.task_breakdown }}",
              "type": "string"
            },
            {
              "id": "2a3ce81f-d756-4605-af94-d13d255f621d",
              "name": "aiOuput",
              "value": "={{ $('[CALL] AI Analysis Service').item.json }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -2288,
        -848
      ],
      "id": "38f125bf-ff0f-418e-9cc9-c3e2019f38f7",
      "name": "[PREPARE] - Data for Create Confluence"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "05a7cdc2-fa1e-4278-801f-e5bf4ed3734e",
              "name": "subject",
              "value": "={{ $('[GET] - Unread Email').item.json.headers.subject }}",
              "type": "string"
            },
            {
              "id": "a6e6bc61-12d2-4e0c-a5cb-a1b0af2fbee0",
              "name": "sender",
              "value": "={{ $('[PRE-PROCESS] - Extract Original Email').item.json?.original_sender }}",
              "type": "string"
            },
            {
              "id": "8a5d1e6f-9682-41b3-8c96-b4b0c2e59390",
              "name": "body",
              "value": "={{ $('[PRE-PROCESS] - Extract Original Email').item.json.clean_body }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -4208,
        -368
      ],
      "id": "698b3496-291c-41cf-8416-5a758d02fc4e",
      "name": "[PREPARE] - Data for AI Analysis"
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "RijpYfQk5ngFJNpN",
          "mode": "list",
          "cachedResultUrl": "/workflow/RijpYfQk5ngFJNpN",
          "cachedResultName": "sub-Create-Confluence-Page"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {}
        },
        "options": {}
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.3,
      "position": [
        -2064,
        -848
      ],
      "id": "5ae81b95-58a7-4690-a806-d9f0ca6c1665",
      "name": "Call 'sub-Create-Confluence-Page'"
    }
  ],
  "connections": {
    "[DECIDE] - Action by Email Category": {
      "main": [
        [
          {
            "node": "[PREPARE] - Data for Jira",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "[PREPARE] - Data for Create Confluence",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "[PARSE] - JSON Policy Update on MS Teams",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "[MOVE] - Email to Spam",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "[EXTRACT] - Confluence Page ID from URL",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Remove label from message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "[EXTRACT] - Confluence Page ID from URL": {
      "main": [
        [
          {
            "node": "[GET] - Confluence Page",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "[GET] - Confluence Page": {
      "main": [
        [
          {
            "node": "Markdown",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Markdown": {
      "main": [
        [
          {
            "node": "[ANALYZE] - Confluence Content for Breakdown",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "[ANALYZE] - Confluence Content for Breakdown": {
      "main": [
        [
          {
            "node": "[PARSE] - Breakdown JSON",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "[PARSE] - Breakdown JSON": {
      "main": [
        [
          {
            "node": "[PARSE] - JSON for Create Confluence Page From Link-",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "[PARSE] - JSON for Create Confluence Page From Link-": {
      "main": [
        [
          {
            "node": "[CREATE] - Confluence Page -CONFLUENCE_LINK_ESTIMATE",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "[PARSE] - JSON Policy Update on MS Teams": {
      "main": [
        [
          {
            "node": "[ALERT] - Policy Update on MS Teams",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Remove label from message": {
      "main": [
        [
          {
            "node": "[SET] - Mark as Read",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "[CREATE] - Confluence Page -CONFLUENCE_LINK_ESTIMATE": {
      "main": [
        [
          {
            "node": "[SET] - Mark as Read",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "[ALERT] - Policy Update on MS Teams": {
      "main": [
        [
          {
            "node": "[SET] - Mark as Read",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "[MOVE] - Email to Spam": {
      "main": [
        [
          {
            "node": "[SET] - Mark as Read",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "[CREATE] - Jira Task from Emai": {
      "main": [
        []
      ]
    },
    "[PARSE] - AI JSON Response": {
      "main": [
        []
      ]
    },
    "[GET] - Unread Email": {
      "main": [
        [
          {
            "node": "[CONVERT]  Email Content to Markdown",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "[PRE-PROCESS] - Extract Original Email": {
      "main": [
        [
          {
            "node": "[PREPARE] - Data for AI Analysis",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "[ANALYZE] - Email Content": {
      "main": [
        [
          {
            "node": "[PARSE] - AI JSON Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "[CONVERT]  Email Content to Markdown": {
      "main": [
        [
          {
            "node": "[PRE-PROCESS] - Extract Original Email",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "[PREPARE] - Data for Jira": {
      "main": [
        [
          {
            "node": "[Call] - Create Jira Task",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "[CALL] AI Analysis Service": {
      "main": [
        [
          {
            "node": "[DECIDE] - Action by Email Category",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "[Call] - Create Jira Task": {
      "main": [
        [
          {
            "node": "[SET] - Mark as Read",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "[PREPARE] - Data for Create Confluence": {
      "main": [
        [
          {
            "node": "Call 'sub-Create-Confluence-Page'",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "[PREPARE] - Data for AI Analysis": {
      "main": [
        [
          {
            "node": "[CALL] AI Analysis Service",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Call 'sub-Create-Confluence-Page'": {
      "main": [
        [
          {
            "node": "[SET] - Mark as Read",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "saveExecutionProgress": true,
    "callerPolicy": "workflowsFromSameOwner",
    "executionOrder": "v0",
    "errorWorkflow": "TblM55auqwhaZ2F7"
  },
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "ai-email-triage-assistant-export"
  }
}